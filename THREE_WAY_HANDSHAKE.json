{
  "id": "THREE_WAY_HANDSHAKE",
  "initial": "INITIALIZING",
  "states": {
    "INITIALIZING": {
      "on": {
        "STARTED": {
          "target": "LOADING_VARIABLES"
        }
      }
    },
    "LOADING_VARIABLES": {
      "entry": [
        {
          "params": {},
          "type": "get_from_file (variables role) (role)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"get_from_file (variables role) (role)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "get_from_file (variables client) (client)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"get_from_file (variables client) (client)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "get_from_file (variables server) (server)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"get_from_file (variables server) (server)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "get_parameters (pkt queue)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"get_parameters (pkt queue)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "get_from_file (variables syn/ack) (syn/ack)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"get_from_file (variables syn/ack) (syn/ack)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "get_from_file (variables ack) (ack)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"get_from_file (variables ack) (ack)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "get_from_file (variables syn) (syn)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"get_from_file (variables syn) (syn)\"\n        }"
          }
        },
        {
          "type": "done"
        }
      ],
      "on": {
        "DONE": [
          {
            "target": "SENDING SYN",
            "cond": "equal (role client)",
            "actions": [
              {
                "params": {},
                "type": "assign (pkt) (pkt)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (pkt) (pkt)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (queue) (queue)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (queue) (queue)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (ack) (ack)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (ack) (ack)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (syn/ack) (syn/ack)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (syn/ack) (syn/ack)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (syn) (syn)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (syn) (syn)\"\n              }"
                }
              }
            ]
          },
          {
            "target": "LISTENING",
            "cond": "equal (role server)",
            "actions": [
              {
                "params": {},
                "type": "assign (pkt) (pkt)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (pkt) (pkt)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (queue) (queue)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (queue) (queue)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (ack) (ack)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (ack) (ack)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (syn/ack) (syn/ack)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (syn/ack) (syn/ack)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (syn) (syn)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (syn) (syn)\"\n              }"
                }
              }
            ]
          }
        ]
      }
    },
    "SENDING SYN": {
      "entry": {
        "params": {},
        "type": "send (pkt)",
        "value": {
          "type": "expression",
          "value": "{\n        \"params\": {},\n        \"type\": \"send (pkt)\"\n      }"
        }
      },
      "on": {
        "PACKET_SENT": {
          "target": "LISTENING",
          "actions": [
            {
              "params": {},
              "type": "assign (pkt) (pkt)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (pkt) (pkt)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (queue) (queue)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (queue) (queue)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (ack) (ack)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (ack) (ack)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (syn/ack) (syn/ack)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (syn/ack) (syn/ack)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (syn) (syn)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (syn) (syn)\"\n            }"
              }
            }
          ]
        }
      }
    },
    "LISTENING": {
      "entry": [
        {
          "params": {},
          "type": "set (5) (timeout)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set (5) (timeout)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "wait_packet_signal (queue timeout)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"wait_packet_signal (queue timeout)\"\n        }"
          }
        }
      ],
      "on": {
        "PACKET_AVAILABLE": {
          "target": "GETTING_FLAGS",
          "actions": [
            {
              "params": {},
              "type": "assign (pkt) (pkt)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (queue) (queue)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (queue) (queue)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (pkt) (pkt)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (ack) (ack)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (ack) (ack)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (syn/ack) (syn/ack)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (syn/ack) (syn/ack)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (syn) (syn)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (syn) (syn)\"\n            }"
              }
            }
          ]
        },
        "TIMEOUT": {
          "target": "TIMEOUT ENDING"
        }
      }
    },
    "GETTING_FLAGS": {
      "entry": [
        {
          "params": {},
          "type": "get_TCP_flags (queue) (flags)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"get_TCP_flags (queue) (flags)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "set (TCP_PACKET_RECEIVED) (event)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set (TCP_PACKET_RECEIVED) (event)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "trigger (event)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"trigger (event)\"\n        }"
          }
        }
      ],
      "on": {
        "TCP_PACKET_RECEIVED": [
          {
            "target": "HANDLING_SYN",
            "cond": "equal (flags syn)",
            "actions": [
              {
                "params": {},
                "type": "assign (pkt) (pkt)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (pkt) (pkt)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (queue) (queue)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (queue) (queue)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (ack) (ack)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (ack) (ack)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (syn/ack) (syn/ack)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (syn/ack) (syn/ack)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (syn) (syn)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (syn) (syn)\"\n              }"
                }
              }
            ]
          },
          {
            "target": "HANDLING_ACK",
            "cond": "equal (flags ack)",
            "actions": [
              {
                "params": {},
                "type": "assign (pkt) (pkt)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (pkt) (pkt)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (queue) (queue)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (queue) (queue)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (ack) (ack)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (ack) (ack)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (syn/ack) (syn/ack)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (syn/ack) (syn/ack)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (syn) (syn)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (syn) (syn)\"\n              }"
                }
              }
            ]
          },
          {
            "target": "HANDLING_SYN_ACK",
            "cond": "equal (flags syn/ack)",
            "actions": [
              {
                "params": {},
                "type": "assign (pkt) (pkt)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (pkt) (pkt)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (queue) (queue)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (queue) (queue)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (ack) (ack)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (ack) (ack)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (syn/ack) (syn/ack)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (syn/ack) (syn/ack)\"\n              }"
                }
              },
              {
                "params": {},
                "type": "assign (syn) (syn)",
                "value": {
                  "type": "expression",
                  "value": "{\n                \"params\": {},\n                \"type\": \"assign (syn) (syn)\"\n              }"
                }
              }
            ]
          }
        ]
      }
    },
    "TIMEOUT ENDING": {
      "entry": [
        {
          "params": {},
          "type": "set (TIMEOUT) (event)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set (TIMEOUT) (event)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "return_values (event)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"return (event)\"\n        }"
          }
        }
      ]
    },
    "HANDLING_SYN": {
      "entry": [
        {
          "params": {},
          "type": "get_packet_IP (queue) (client_ip)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"get_packet_IP (queue) (client_ip)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "set_IP_dst (pkt client_ip) (pkt)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set_IP_dst (pkt client_ip) (pkt)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "set (12321) (client_port)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"get_packet_port (queue) (client_port)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "set_TCP_dport (pkt client_port) (pkt)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set_TCP_dport (pkt client_port) (pkt)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "set_TCP_automatic_packet_seq (pkt) (pkt)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set_TCP_automatic_packet_seq (pkt) (pkt)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "set_TCP_automatic_packet_ack (pkt queue) (pkt)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set_TCP_automatic_packet_ack (pkt queue) (pkt)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "set_TCP_flags (pkt syn/ack) (pkt)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set_TCP_flags (pkt syn/ack) (pkt)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "pop (queue)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"pop (queue)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "send (pkt)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"send (pkt)\"\n        }"
          }
        }
      ],
      "on": {
        "PACKET_SENT": {
          "target": "LISTENING",
          "actions": [
            {
              "params": {},
              "type": "assign (pkt) (pkt)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (pkt) (pkt)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (queue) (queue)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (queue) (queue)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (ack) (ack)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (ack) (ack)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (syn/ack) (syn/ack)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (syn/ack) (syn/ack)\"\n            }"
              }
            },
            {
              "params": {},
              "type": "assign (syn) (syn)",
              "value": {
                "type": "expression",
                "value": "{\n              \"params\": {},\n              \"type\": \"assign (syn) (syn)\"\n            }"
              }
            }
          ]
        }
      }
    },
    "HANDLING_ACK": {
      "entry": [
        {
          "params": {},
          "type": "pop (queue)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"pop (queue)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "done",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"done\"\n        }"
          }
        }
      ],
      "on": {
        "DONE": {
          "target": "ENDING"
        }
      }
    },
    "HANDLING_SYN_ACK": {
      "entry": [
        {
          "params": {},
          "type": "set_TCP_automatic_packet_seq (pkt) (pkt)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set_TCP_automatic_packet_seq (pkt) (pkt)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "set_TCP_automatic_packet_ack (pkt queue) (pkt)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set_TCP_automatic_packet_ack (pkt queue) (pkt)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "set_TCP_flags (pkt ack) (pkt)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set_TCP_flags (pkt ack) (pkt)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "pop (queue)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"pop (queue)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "send (pkt)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"send (pkt)\"\n        }"
          }
        }
      ],
      "on": {
        "PACKET_SENT": {
          "target": "ENDING"
        }
      }
    },
    "ENDING": {
      "entry": [
        {
          "params": {},
          "type": "set (DONE) (event)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"set (DONE) (event)\"\n        }"
          }
        },
        {
          "params": {},
          "type": "return_values (event)",
          "value": {
            "type": "expression",
            "value": "{\n          \"params\": {},\n          \"type\": \"return (event)\"\n        }"
          }
        }
      ]
    }
  }
}
